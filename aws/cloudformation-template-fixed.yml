AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static website hosting with S3, CloudFront, and custom domain with proper SSL handling'

# AWS Managed Policy IDs - These are global constants provided by AWS
Mappings:
  AWSManagedPolicies:
    CloudFront:
      CachingOptimized: '658327ea-f89d-4fab-a63d-7e88639e58f6'
      CachingDisabled: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad'
      CachingOptimizedForUncompressed: 'b2884449-e4de-46a7-ac36-70bc7f1ddd6d'
    OriginRequest:
      CORSCustomOrigin: '59781a5b-3903-41f3-afcb-af62929ccde1'
      CORSS3Origin: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'
      AllViewer: '216adef6-5c7f-47e4-c4c02393f86c'
    ResponseHeaders:
      SecurityHeadersPolicy: '67f7725c-6f97-4210-82d7-5512b31e9d03'
      SimpleCORS: '60669652-455b-4ae9-85a4-c4c02393f86c'
      CORSAndSecurityHeaders: 'e61eb60c-9c35-4d20-a928-2b84e02af89c'
  AWSConstants:
    CloudFront:
      HostedZoneId: 'Z2FDTNDATAQYW2' # Global CloudFront hosted zone ID

Parameters:
  DomainName:
    Type: String
    Description: 'Your custom domain name (e.g., yourdomain.com)'
    Default: 'example.com'

  SubdomainName:
    Type: String
    Description: 'Subdomain for the website (e.g., www)'
    Default: 'www'

  EnableSSL:
    Type: String
    Description: 'Enable SSL certificate (requires manual DNS validation)'
    Default: 'false'
    AllowedValues: ['true', 'false']

Conditions:
  UseSSL: !Equals [!Ref EnableSSL, 'true']

Resources:
  # Route 53 Hosted Zone (created first)
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'

  # S3 Bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${SubdomainName}.${DomainName}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket}/*'

  # SSL Certificate (conditional)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseSSL
    DependsOn: HostedZone
    Properties:
      DomainName: !Sub '${SubdomainName}.${DomainName}'
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${SubdomainName}.${DomainName}'
          HostedZoneId: !Ref HostedZone
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZone

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubdomainName}.${DomainName}'
          - !Ref DomainName
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: !If [UseSSL, 'redirect-to-https', 'allow-all']
          CachePolicyId: !FindInMap [AWSManagedPolicies, CloudFront, CachingOptimized]
          OriginRequestPolicyId: !FindInMap [AWSManagedPolicies, OriginRequest, CORSS3Origin]
          ResponseHeadersPolicyId: !FindInMap [AWSManagedPolicies, ResponseHeaders, SecurityHeadersPolicy]
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - UseSSL
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # Route 53 Records
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub '${SubdomainName}.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: !FindInMap [AWSConstants, CloudFront, HostedZoneId]

  DNSRecordRoot:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: !FindInMap [AWSConstants, CloudFront, HostedZoneId]

Outputs:
  WebsiteURL:
    Description: 'Website URL'
    Value: !Sub
      - '${Protocol}://${SubdomainName}.${DomainName}'
      - Protocol: !If [UseSSL, 'https', 'http']
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  S3BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  HostedZoneId:
    Description: 'Route 53 Hosted Zone ID'
    Value: !Ref HostedZone
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'

  NameServers:
    Description: 'Name servers for your domain (configure these in Namecheap)'
    Value: !Join [', ', !GetAtt HostedZone.NameServers]
    Export:
      Name: !Sub '${AWS::StackName}-NameServers'

  SSLCertificateArn:
    Condition: UseSSL
    Description: 'SSL Certificate ARN (requires manual validation)'
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::StackName}-SSLCertificateArn'
