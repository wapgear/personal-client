name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1

jobs:
  # CI Job - Test and Build
  ci:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test -- --coverage --reporter=verbose
        env:
          CI: true

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Infrastructure Deployment Job
  deploy-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      s3-bucket: ${{ steps.deploy-stack.outputs.s3-bucket }}
      cloudfront-id: ${{ steps.deploy-stack.outputs.cloudfront-id }}
      website-url: ${{ steps.deploy-stack.outputs.website-url }}
      nameservers: ${{ steps.deploy-stack.outputs.nameservers }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate AWS credentials
        run: |
          echo "Validating AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials validated successfully!"

      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          STACK_NAME="${{ secrets.STACK_NAME || 'personal-website' }}"
          DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
          SUBDOMAIN_NAME="${{ secrets.SUBDOMAIN_NAME || 'www' }}"

          if [ -z "$DOMAIN_NAME" ]; then
            echo "❌ Error: DOMAIN_NAME secret is required"
            echo "Please set the DOMAIN_NAME secret in your GitHub repository"
            exit 1
          fi

          echo "🚀 Deploying CloudFormation stack: $STACK_NAME"
          echo "🌐 Domain: ${SUBDOMAIN_NAME}.${DOMAIN_NAME}"
          echo "📍 Region: ${{ env.AWS_REGION }}"

          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "📦 Stack exists, updating..."
            OPERATION="update"
          else
            echo "🆕 Creating new stack..."
            OPERATION="create"
          fi

          aws cloudformation deploy \
            --template-file aws/cloudformation-template.yml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides \
              DomainName="$DOMAIN_NAME" \
              SubdomainName="$SUBDOMAIN_NAME" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset

          # Get stack outputs
          echo "📊 Retrieving stack outputs..."

          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)

          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)

          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
            --output text)

          NAME_SERVERS=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`NameServers`].OutputValue' \
            --output text)

          # Set outputs
          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "nameservers=$NAME_SERVERS" >> $GITHUB_OUTPUT

          echo ""
          echo "✅ Infrastructure deployment completed!"
          echo "📦 S3 Bucket: $S3_BUCKET"
          echo "🌐 CloudFront Distribution: $CLOUDFRONT_ID"
          echo "🔗 Website URL: $WEBSITE_URL"
          echo "🌍 Name Servers: $NAME_SERVERS"

  # Application Deployment Job
  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [ci, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ needs.deploy-infrastructure.outputs.s3-bucket }}"
          echo "📦 Deploying to S3 bucket: $S3_BUCKET"

          # Upload static assets with long cache
          aws s3 sync dist/ s3://$S3_BUCKET \
            --delete \
            --exact-timestamps \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"

          # Upload HTML and dynamic files with short cache
          aws s3 sync dist/ s3://$S3_BUCKET \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --include "service-worker.js" \
            --include "manifest.json"

          echo "✅ Files uploaded successfully!"

      - name: Invalidate CloudFront cache
        run: |
          CLOUDFRONT_ID="${{ needs.deploy-infrastructure.outputs.cloudfront-id }}"
          echo "🔄 Invalidating CloudFront distribution: $CLOUDFRONT_ID"

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "✅ CloudFront invalidation created: $INVALIDATION_ID"

      - name: Deployment Summary
        run: |
          echo ""
          echo "🎉 Deployment completed successfully!"
          echo "=================================="
          echo "📦 S3 Bucket: ${{ needs.deploy-infrastructure.outputs.s3-bucket }}"
          echo "🌐 CloudFront ID: ${{ needs.deploy-infrastructure.outputs.cloudfront-id }}"
          echo "🔗 Website URL: ${{ needs.deploy-infrastructure.outputs.website-url }}"
          echo ""
          echo "🔧 DNS Configuration:"
          echo "Update your Namecheap nameservers to:"
          echo "${{ needs.deploy-infrastructure.outputs.nameservers }}"
          echo ""
          echo "⏱️  DNS propagation may take up to 48 hours"
          echo "🌍 Your site will be live at: ${{ needs.deploy-infrastructure.outputs.website-url }}"
