name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1

jobs:
  # CI Job - Test and Build
  ci:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test -- --coverage --reporter=verbose
        env:
          CI: true

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Infrastructure Deployment Job
  deploy-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      s3-bucket: ${{ steps.deploy-stack.outputs.s3-bucket }}
      cloudfront-id: ${{ steps.deploy-stack.outputs.cloudfront-id }}
      website-url: ${{ steps.deploy-stack.outputs.website-url }}
      nameservers: ${{ steps.deploy-stack.outputs.nameservers }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate AWS credentials
        run: |
          echo "Validating AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials validated successfully!"

      - name: Deploy CloudFormation stack
        id: deploy-stack
        timeout-minutes: 60 # Add explicit timeout
        run: |
          STACK_NAME="${{ secrets.STACK_NAME || 'personal-website' }}"
          DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
          SUBDOMAIN_NAME="${{ secrets.SUBDOMAIN_NAME || 'www' }}"
          ENABLE_SSL="${{ secrets.ENABLE_SSL || 'false' }}"

          if [ -z "$DOMAIN_NAME" ]; then
            echo "‚ùå Error: DOMAIN_NAME secret is required"
            echo "Please set the DOMAIN_NAME secret in your GitHub repository"
            exit 1
          fi

          echo "üöÄ Deploying CloudFormation stack: $STACK_NAME"
          echo "üåê Domain: ${SUBDOMAIN_NAME}.${DOMAIN_NAME}"
          echo "üîí SSL Enabled: $ENABLE_SSL"
          echo "üìç Region: ${{ env.AWS_REGION }}"

          # Choose template based on SSL setting
          if [ "$ENABLE_SSL" = "true" ]; then
            TEMPLATE_FILE="aws/cloudformation-template-ssl.yml"
            echo "üìã Using SSL-enabled template"
          else
            TEMPLATE_FILE="aws/cloudformation-template-simple.yml"
            echo "üìã Using simple template (no SSL)"
          fi

          # Check if stack exists and its state
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "üì¶ Stack exists with status: $STACK_STATUS"
            
            if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
              echo "üóëÔ∏è  Stack is in $STACK_STATUS state, deleting and recreating..."
              aws cloudformation delete-stack \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }}
              
              echo "‚è≥ Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }}
              
              echo "‚úÖ Stack deleted successfully"
              OPERATION="create"
            else
              echo "üì¶ Stack exists, updating..."
              OPERATION="update"
            fi
          else
            echo "üÜï Creating new stack..."
            OPERATION="create"
          fi

          # Deploy with the appropriate template and better error handling
          echo "üîß Starting CloudFormation deployment..."

          # First, validate the template
          echo "üîç Validating CloudFormation template..."
          aws cloudformation validate-template \
            --template-body file://$TEMPLATE_FILE \
            --region ${{ env.AWS_REGION }}

          if [ $? -ne 0 ]; then
            echo "‚ùå Template validation failed!"
            exit 1
          fi

          echo "‚úÖ Template validation successful"

          # Deploy the stack with explicit timeout and monitoring
          echo "üöÄ Deploying stack (this may take 15-30 minutes for CloudFront)..."

          # Prepare parameters based on template
          if [ "$ENABLE_SSL" = "true" ]; then
            PARAMETERS="DomainName=$DOMAIN_NAME SubdomainName=$SUBDOMAIN_NAME EnableSSL=true CertificateValidationMethod=DNS"
            echo "üîí SSL certificate will be created and require validation"
          else
            PARAMETERS="DomainName=$DOMAIN_NAME SubdomainName=$SUBDOMAIN_NAME"
          fi

          aws cloudformation deploy \
            --template-file $TEMPLATE_FILE \
            --stack-name "$STACK_NAME" \
            --parameter-overrides $PARAMETERS \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --timeout-in-minutes 45 &

          # Store the deployment PID for monitoring
          DEPLOY_PID=$!

          # Monitor the deployment with periodic status updates
          echo "üìä Monitoring deployment progress..."
          COUNTER=0
          while kill -0 $DEPLOY_PID 2>/dev/null; do
            sleep 60  # Check every minute
            COUNTER=$((COUNTER + 1))
            
            # Get current stack status
            if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              CURRENT_STATUS=$(aws cloudformation describe-stacks \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "‚è±Ô∏è  [$COUNTER min] Current status: $CURRENT_STATUS"
              
              # Check for failed states
              if [[ "$CURRENT_STATUS" == *"FAILED"* ]] || [[ "$CURRENT_STATUS" == *"ROLLBACK"* ]]; then
                echo "‚ùå Stack deployment failed with status: $CURRENT_STATUS"
                echo "üîç Checking stack events for errors..."
                aws cloudformation describe-stack-events \
                  --stack-name "$STACK_NAME" \
                  --region ${{ env.AWS_REGION }} \
                  --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
                  --output table
                kill $DEPLOY_PID 2>/dev/null
                exit 1
              fi
            fi
            
            # Timeout after 40 minutes
            if [ $COUNTER -ge 40 ]; then
              echo "‚è∞ Deployment timeout reached (40 minutes)"
              echo "üîç Current stack status:"
              aws cloudformation describe-stacks \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text
              kill $DEPLOY_PID 2>/dev/null
              exit 1
            fi
          done

          # Wait for the deployment command to complete
          wait $DEPLOY_PID
          DEPLOY_EXIT_CODE=$?

          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "‚ùå CloudFormation deployment failed with exit code: $DEPLOY_EXIT_CODE"
            echo "üîç Checking stack events for errors..."
            aws cloudformation describe-stack-events \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
              --output table
            exit 1
          fi

          # Get stack outputs
          echo "üìä Retrieving stack outputs..."

          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)

          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)

          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
            --output text)

          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
            --output text)

          NAME_SERVERS=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`NameServers`].OutputValue' \
            --output text)

          # Get SSL certificate ARN if SSL is enabled
          if [ "$ENABLE_SSL" = "true" ]; then
            SSL_CERT_ARN=$(aws cloudformation describe-stacks \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }} \
              --query 'Stacks[0].Outputs[?OutputKey==`SSLCertificateArn`].OutputValue' \
              --output text 2>/dev/null || echo "Not available")
            echo "ssl-cert-arn=$SSL_CERT_ARN" >> $GITHUB_OUTPUT
          fi

          # Set outputs
          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "cloudfront-url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
          echo "nameservers=$NAME_SERVERS" >> $GITHUB_OUTPUT
          echo "ssl-enabled=$ENABLE_SSL" >> $GITHUB_OUTPUT

          echo ""
          echo "‚úÖ Infrastructure deployment completed!"
          echo "üì¶ S3 Bucket: $S3_BUCKET"
          echo "üåê CloudFront Distribution: $CLOUDFRONT_ID"
          echo "üîó Website URL: $WEBSITE_URL"
          echo "üîó CloudFront URL: $CLOUDFRONT_URL"
          echo "üåç Name Servers: $NAME_SERVERS"

          if [ "$ENABLE_SSL" = "true" ]; then
            echo "üîí SSL Certificate ARN: $SSL_CERT_ARN"
            echo ""
            echo "üö® IMPORTANT: SSL Certificate requires validation!"
            echo "Go to AWS Certificate Manager and validate the certificate"
          fi

          echo ""
          echo "üí° Your site is immediately accessible via CloudFront URL"
          echo "üí° Custom domain will work after DNS propagation (up to 48 hours)"

  # Application Deployment Job
  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [ci, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ needs.deploy-infrastructure.outputs.s3-bucket }}"
          echo "üì¶ Deploying to S3 bucket: $S3_BUCKET"

          # Upload static assets with long cache
          aws s3 sync dist/ s3://$S3_BUCKET \
            --delete \
            --exact-timestamps \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"

          # Upload HTML and dynamic files with short cache
          aws s3 sync dist/ s3://$S3_BUCKET \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --include "service-worker.js" \
            --include "manifest.json"

          echo "‚úÖ Files uploaded successfully!"

      - name: Invalidate CloudFront cache
        run: |
          CLOUDFRONT_ID="${{ needs.deploy-infrastructure.outputs.cloudfront-id }}"
          echo "üîÑ Invalidating CloudFront distribution: $CLOUDFRONT_ID"

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"

      - name: Deployment Summary
        run: |
          echo ""
          echo "üéâ Deployment completed successfully!"
          echo "=================================="
          echo "üì¶ S3 Bucket: ${{ needs.deploy-infrastructure.outputs.s3-bucket }}"
          echo "üåê CloudFront ID: ${{ needs.deploy-infrastructure.outputs.cloudfront-id }}"
          echo "üîó CloudFront URL: ${{ needs.deploy-infrastructure.outputs.cloudfront-url }}"
          echo "üîó Website URL: ${{ needs.deploy-infrastructure.outputs.website-url }}"
          echo ""
          echo "üöÄ IMMEDIATE ACCESS:"
          echo "Your site is live now at: ${{ needs.deploy-infrastructure.outputs.cloudfront-url }}"
          echo ""

          if [ "${{ needs.deploy-infrastructure.outputs.ssl-enabled }}" = "true" ]; then
            echo "üîí SSL CERTIFICATE INFORMATION:"
            echo "==============================="
            echo "Certificate ARN: ${{ needs.deploy-infrastructure.outputs.ssl-cert-arn }}"
            echo ""
            echo "üö® IMPORTANT: Certificate Validation Required!"
            echo "1. Go to AWS Certificate Manager in the AWS Console"
            echo "2. Find your certificate and complete DNS validation"
            echo "3. Add the CNAME records to your DNS provider"
            echo ""
            echo "üîó Custom Domain URL (after validation): ${{ needs.deploy-infrastructure.outputs.website-url }}"
            echo ""
          fi

          echo "üîß DNS Configuration for Custom Domain:"
          echo "Update your Namecheap nameservers to:"
          echo "${{ needs.deploy-infrastructure.outputs.nameservers }}"
          echo ""
          echo "‚è±Ô∏è  DNS propagation may take up to 48 hours"

          if [ "${{ needs.deploy-infrastructure.outputs.ssl-enabled }}" = "true" ]; then
            echo ""
            echo "üìã Next Steps for SSL:"
            echo "1. Validate SSL certificate in AWS Certificate Manager"
            echo "2. Update domain nameservers"
            echo "3. Wait for DNS propagation"
            echo "4. Your site will be accessible via HTTPS at your custom domain"
          else
            echo ""
            echo "üí° To enable SSL later, set the ENABLE_SSL secret to 'true' and redeploy"
          fi
